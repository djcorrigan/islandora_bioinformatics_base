<?php

/**
* @file islandora_base_ingest.test
* Attempts to ingest a project object into a randomly generated base collection, follwed by a person object, and then tries to add the person object to the project using an isPartOf relationship. Finally, it deletes both objects.
*
* For the duration of the test, the two pids in use will be:
*
* islandora:test_person and islandora:test_project
*
*
* @author Dalton Mackenzie <demackenzie@upei.ca>
*/

class IslandoraBaseIngestTestCase extends IslandoraWebTestCase {

  /**
  * Get test information
  *
  * @see IslandoraWebTestCase::getInfo()
  */

  public static function getInfo() {
    return array(
      'name' => 'Base Ingest/Relate/Purge',
      'description' => 'Ingests a project, a person, and relates them, then deletes them.',
      'group' => 'Islandora Base',
    );
  }

  /**
  * Set up the test environment.
  *
  * @see IslandoraWebTestCase::setUp()
  */

  public function setUp() {
    parent::setUp(array(
      'islandora',
      'islandora_bioinformatics_base',
      'islandora_basic_collection',
      )
    );
  }

  /**
  * @function testIngestProjectandPerson()
  *
  * @author Dalton Mackenzie <demackenzie@upei.ca>
  *
  * Creates an administrative user and attempts to ingest a project
  * Then a person object is ingested.
  * The pids used for these two objects are islandora:test_project and
  * islandora:test_person.
  *
  * After the objects are ingested, a test relationship is assigned between
  * them, and islandora:test_person is assigned an isPartOf relationship with
  * islandora:test_project.
  *
  * Next a Sparql query is used, and it searches for an object of type person_cmodel,
  * (a person object), that also has an isPartOf relationship with islandora:test_project.
  *
  * The test asserts that it has found a result with pid islandora:test_person as expected.
  *
  * Finally, the relationship is removed, and a purge of both objects is tested as well.
  */

  public function testIngestProjectandPersonRelatePurge() {
    

    //Gets the admin user
    $user = $this->admin;

    //Logs them in.

    $this->drupalLogin($user);

    //Get the path to prepend onto the fixtures datastreams locations.
    $path = drupal_get_path('module', 'islandora_bioinformatics_base');
    $path = $path . "/"; //Append a '/' to delimit between the $path and fixtures/$datastream_file

    //Create a project properties array for the construction and ingestion of a project object.
    $proj_properties = array();   //init the array
    $proj_properties['label'] = 'project_test';   //Give it a label
    $proj_properties['pid'] = 'islandora:test_project';  //PID
    $proj_properties['models'] = array(   //The content model used is the project_cmodel
        'islandora:project_cmodel',
        );
    $proj_properties['parent'] = 'islandora:root'; //Just use root as the parent for now, delete it at the end of the test.

    $proj_datastreams = array(); // init the data streams array


    //The datastreams for the object will be taken from files in the fixtures directory
    
    $proj_datastream_dc = array(); //Init the Dublin Core datastream
    $proj_datastream_dc['dsid'] = 'DC';  //dsid comes from the ds composite model in the xml directory
    $proj_datastream_dc['path'] = $path . 'fixtures/example_project_dc.xml'; //Path to the file containing the datastream
    $proj_datastream_dc['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $proj_datastream_dc['mimetype'] = 'text/xml';

    $proj_datastream_mads = array(); //Init the MADS datastream
    $proj_datastream_mads['dsid'] = 'MADS'; //dsid comes from the ds composite model in the xml directory
    $proj_datastream_mads['path'] = $path . 'fixtures/example_project_mads.xml'; //Path to the file containing the datastream
    $proj_datastream_mads['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $proj_datastream_mads['mimetype'] = 'text/xml';

    $proj_datastream_relsext = array(); //Init the RELS-EXT datastream
    $proj_datastream_relsext['dsid'] = 'RELS-EXT'; //dsid comes from the ds composite model in the xml directory
    $proj_datastream_relsext['path'] = $path . 'fixtures/example_project_relsext.rdf'; //Path to the file containing the datastream
    $proj_datastream_relsext['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $proj_datastream_relsext['mimetype'] = 'text/xml';

    //Add all of the datastreams to the datastreams array

    $proj_datastreams[] = $proj_datastream_dc;
    $proj_datastreams[] = $proj_datastream_mads;
    $proj_datastreams[] = $proj_datastream_relsext;

    //Ingest the object with its properties array and datastreams array.
    try {
      $project_test_object = $this->ingestConstructedObject($proj_properties, $proj_datastreams);
    }
    catch (RepositoryException $re) {
      echo 'Caught exception with Project: ', $re->getMessage(), "\n";
    }
  

    //Next we'll construct and ingest a person object

    $person_properties = array(); //Init the Person's properties array.
    $person_properties['label'] = 'person_test'; //Label
    $person_properties['pid'] = 'islandora:test_person'; //PID
    $person_properties['models'] = array( //Uses the person content model
        'islandora:person_cmodel',
        );
    $person_properties['parent'] = 'islandora:test_project'; //The parent is the test project, establishing a relationship between them.

    $person_datastreams = array(); //Init the test person's datastreams array
    
    $person_datastream_dc = array(); //Init the Dublin Core datastream array
    $person_datastream_dc['dsid'] = 'DC';
    $person_datastream_dc['path'] = $path . 'fixtures/example_person_dc.xml';
    $person_datastream_dc['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $person_datastream_dc['mimetype'] = 'text/xml';

    $person_datastream_mads = array(); //Init the MADS datastream array
    $person_datastream_mads['dsid'] = 'MADS';
    $person_datastream_mads['path'] = $path . 'fixtures/example_person_mads.xml';
    $person_datastream_mads['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $person_datastream_mads['mimetype'] = 'text/xml';

    $person_datastream_relsext = array(); //Init the RELS-EXT datastream array.
    $person_datastream_relsext['dsid'] = 'RELS-EXT';
    $person_datastream_relsext['path'] = $path . 'fixtures/example_person_relsext.rdf'; 
    $person_datastream_relsext['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $person_datastream_relsext['mimetype'] = 'text/xml';

    //Add the datastreams to the person datastreams array.

    $person_datastreams[] = $person_datastream_dc;
    $person_datastreams[] = $person_datastream_mads;
    $person_datastreams[] = $person_datastream_relsext;

    //Ingest the person object

    try {
      $person_test_object = $this->ingestConstructedObject($person_properties, $person_datastreams);
    }
    catch (RepositoryException $re) {
      echo 'Caught exception with Person: ', $re->getMessage(), "\n";
    }

    /******************************************************************************************************
    
    At this point we should have successfully ingested a project object and a person object.

    Project object -> (Php var name: $project_test_object) (islandora pid: islandora:test_project)
    Person object -> (Php var name: $person_test_object) (islandora pid: islandora:test_person)

    The relationship between the two of them will now be established and tested.

    *******************************************************************************************************/

    $testSuccess = false; //A variable to track whether or not the relationship test was successful.

    //Establish a relationship between islandora:test_person and islandora_test_project

    //Next, add the isPartOf relationship to the person_object, with the project_object as the target.

    $person_object->relationships->add(FEDORA_RELS_EXT_URI, 'isPartOf', $project_object->id);

    //Now run a query to ensure that the relationship exists.

      $query = "SELECT ?pid
                FROM <#ri>
                WHERE {
                  ?pid <fedora-model:hasModel> <info:fedora/islandora:person_cmodel> .
                  ?pid <fedora-rels-ext:isPartOf> <info:fedora/islandora:test_project> .
                }";

    // Get a new Tuque connection, for more info, 
    // see https://github.com/Islandora/islandora/wiki/Build,-Access,-Modify-and-Delete-Fedora-objects-with-the-Tuque-interface
    
    $tuque = new IslandoraTuque();

    $query_results = $tuque->repository->ri->sparqlQuery($query, 'unlimited'); //Get the query results

    foreach ($query_results as $person) {
      if ($person['pid']['value'] == 'islandora:test_person') {
        $testSuccess = true; //The test worked, now remove the relationship.

        $person_object->relationships->remove(FEDORA_RELS_EXT_URI, 'isPartOf', $project_object->id);
      }
      else {

        $testSuccess = false;
        $this->fail("The relationship test was unsuccessful.");
      }
    }

    $this->assertTrue($testSuccess); //Make sure that the relationship test was successful.
 

    //Now delete the two objects, safety is turned off, but this is a specific test case.

    $this->deleteObject('islandora:test_person', $button = NULL, $safety = FALSE);
    $this->deleteObject('islandora:test_project', $button = NULL, $safety = FALSE);

  }
}
