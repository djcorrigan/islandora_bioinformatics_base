<?php

/**
* @file
* Attempts to ingest a project object into a randomly generated base collection, follwed by a person object, and then tries to add the person object to the project.
*
* @author Dalton Mackenzie <demackenzie@upei.ca>
*/

class IslandoraBaseIngestTestCase extends IslandoraWebTestCase {

  /**
  * Get test information
  *
  * @see IslandoraWebTestCase::getInfo()
  */

  public static function getInfo() {
    return array(
      'name' => 'Base Ingest/Relate',
      'description' => 'Ingests a project, a person, and relates them.',
      'group' => 'Islandora Base',
    );
  }

  /**
  * Set up the test environment.
  *
  * @see IslandoraWebTestCase::setUp()
  */

  public function setUp() {
    parent::setUp(array(
      'islandora',
      'islandora_bioinformatics_base',
      'islandora_basic_collection',
      )
    );
  }

  /**
  * Creates an administrative user and attempts to ingest a project
  */

  public function testIngestProjectandPerson() {
    

    //Creates an admin user

    $user = $this->drupalCreateUser(array(
      'view fedora repository objects',
      'ingest fedora objects',
      'administer site configuration',
      'manage object properties',
      'delete fedora objects and datastreams',
      'create child collection',
    ));

    //Logs them in.

    $this->drupalLogin($user);

    //Create a project properties array for the construction and ingestion of a project object.
    $proj_properties = array();   //init the array
    $proj_properties['label'] = 'project_test';   //Give it a label
    $proj_properties['pid'] = 'islandora:test_project';  //PID
    $proj_properties['models'] = array(   //The content model used is the project_cmodel
        'islandora:project_cmodel',
        );
    $proj_properties['parent'] = 'islandora:root'; //Just use root as the parent for now, delete it at the end of the test.

    $proj_datastreams = array(); // init the data streams array


    //The datastreams for the object will be taken from files in the fixtures directory
    
    $proj_datastream_dc = array(); //Init the Dublin Core datastream
    $proj_datastream_dc['dsid'] = 'DC';  //dsid comes from the ds composite model in the xml directory
    $proj_datastream_dc['path'] = 'fixtures/example_project_dc.xml'; //Path to the file containing the datastream
    $proj_datastream_dc['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $proj_datastream_dc['mimetype'] = 'text/xml';

    $proj_datastream_mads = array(); //Init the MADS datastream
    $proj_datastream_mads['dsid'] = 'MADS'; //dsid comes from the ds composite model in the xml directory
    $proj_datastream_mads['path'] = 'fixtures/example_project_mads.xml'; //Path to the file containing the datastream
    $proj_datastream_mads['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $proj_datastream_mads['mimetype'] = 'text/xml';

    $proj_datastream_relsext = array(); //Init the RELS-EXT datastream
    $proj_datastream_relsext['dsid'] = 'RELS-EXT'; //dsid comes from the ds composite model in the xml directory
    $proj_datastream_relsext['path'] = 'fixtures/example_project_relsext.rdf'; //Path to the file containing the datastream
    $proj_datastream_relsext['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $proj_datastream_relsext['mimetype'] = 'text/xml';

    //Add all of the datastreams to the datastreams array

    $proj_datastreams[] = $proj_datastream_dc;
    $proj_datastreams[] = $proj_datastream_mads;
    $proj_datastreams[] = $proj_datastream_relsext;

    //Ingest the object with its properties array and datastreams array.
    $project_test_object = $this->ingestConstructedObject($proj_properties, $proj_datastreams);

    //Next we'll construct and ingest a person object

    $person_properties = array(); //Init the Person's properties array.
    $person_properties['label'] = 'person_test'; //Label
    $person_properties['pid'] = 'islandora:test_person'; //PID
    $person_properties['models'] = array( //Uses the person content model
        'islandora:person_cmodel',
        );
    $person_properties['parent'] = 'islandora:test_project'; //The parent is the test project, establishing a relationship between them.

    $person_datastreams = array(); //Init the test person's datastreams array
    
    $person_datastream_dc = array(); //Init the Dublin Core datastream array
    $person_datastream_dc['dsid'] = 'DC';
    $person_datastream_dc['path'] = 'fixtures/example_person_dc.xml';
    $person_datastream_dc['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $person_datastream_dc['mimetype'] = 'text/xml';

    $person_datastream_mads = array(); //Init the MADS datastream array
    $person_datastream_mads['dsid'] = 'MADS';
    $person_datastream_mads['path'] = 'fixtures/example_person_mads.xml';
    $person_datastream_mads['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $person_datastream_mads['mimetype'] = 'text/xml';

    $person_datastream_relsext = array(); //Init the RELS-EXT datastream array.
    $person_datastream_relsext['dsid'] = 'RELS-EXT';
    $person_datastream_relsext['path'] = 'fixtures/example_person_relsext.rdf'; 
    $person_datastream_relsext['control_group'] = 'M'; //M - managed by Fedora, X - in line XML
    $person_datastream_relsext['mimetype'] = 'text/xml';

    //Add the datastreams to the person datastreams array.

    $person_datastreams[] = $person_datastream_dc;
    $person_datastreams[] = $person_datastream_mads;
    $person_datastreams[] = $person_datastream_relsext;

    //Ingest the person object
    $person_test_object = $this->ingestConstructedObject($person_properties, $person_datastreams);

    /*
        Test solr indexing

        *May be inconsistent due to timing issues.
    */

    //May need to explicitly add a relationship.

    //Purge when finished.
    
    //deleteObject($pid, $button = NULL,$safety = TRUE) function IslandoraWebTestCase

    $this->deleteObject('test_person', $button = NULL, $safety = TRUE);
    $this->deleteObject('test_project', $button = NULL, $safety = TRUE);

    //Test every role with every use case. (Make sure anon can't delete objects, but admins can etc.)
  
    //As for clicking links and such, manage permissions in the collection test group has a bunch of link clicking
    //methods to look at.


