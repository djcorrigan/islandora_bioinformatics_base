<?php
/**
 * @file
 *
 * @author Brent Mitton
 * @author Dalton MacKenzie
 * @author Natasha Squires
 * @author Nolan Phillips
 * @author Quintin Dawson
 *
 * islandora_bioinformatics_base.module
 *
 * Hooks and callbacks for the module.
 *
 *
 */
function islandora_object_has_lab_objects($object){
  /**
   * @author Nolan Phillips
   * @param $object
   *
   * This function returns true if the $object passed in might
   * have Lab Objects related to it.
   */
  $cmodel_id = $object->models[0];
  $query = "
    PREFIX fedora-model: <info:fedora/fedora-system:def/model#>
    SELECT ?pid
    FROM <#ri>
    WHERE
    {
      {?pid fedora-model:hasModel <info:fedora/fedora-system:ContentModel-3.0>} .
      {?pid fedora-model:hasModel <info:fedora/islandora:lab_object_cmodel>} .
      {?pid ?datarel <info:fedora/$cmodel_id>} .
    }
  ";

  $tuque = new IslandoraTuque();
  $result = $tuque->repository->ri->sparqlQuery($query, 'unlimited');

  if (sizeof($result) > 0)
    return TRUE;
  else
    return FALSE;
}

function islandora_object_has_people($object){
  /**
   * @author Nolan Phillips
   * @param $object
   *
   * This function returns true if the $object passed in might
   * have Lab Objects related to it.
   */
  $cmodel_id = $object->models[0];
  $query = "
    PREFIX fedora-model: <info:fedora/fedora-system:def/model#>
    SELECT ?datarel
    FROM <#ri>
    WHERE
    {
      {<info:fedora/islandora:person_cmodel> ?datarel <info:fedora/$cmodel_id>} .
    }
  ";

  $tuque = new IslandoraTuque();
  $result = $tuque->repository->ri->sparqlQuery($query, 'unlimited');

  if (sizeof($result) > 0)
    return TRUE;
  else
    return FALSE;
}

function islandora_bioinformatics_base_menu() {

  /**
   * @author Natasha Squires
   * @author Nolan Phillips <ncphillups@upei.ca>
   */
  /**
   * Implements hook_menu().
   *
   * Defines a list of URLs provided by the Base Solution Pack.
   */
  return array(
    'islandora/object/%islandora_object/lab_objects' => array(
      /**
       * ### www.upeikerrlabs.ca/islandora/object/\%islandora_object/lab_objects
       * Provides a tab on an Islandora Object page that shows related Lab Object
       * forms for each type of Lab Object related to the islandora object.
       */
      'title' => 'Lab Objects',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'callback_related_lab_objects',
      'page arguments' => array(2),
      'access callback' => 'islandora_object_has_lab_objects',
      'access arguments' => array(2),
    ),
    'islandora/object/%islandora_object/ingest/%rel_cmodel' => array(
      /**
       * ### www.upeikerrlabs.ca/islandora/object/\%islandora_object/ingest/\%rel_cmodel
       * Starts the ingestion process for a new object which will be
       * related to %islandora_object. The new object will be of type
       * %rel_cmodel. This is only allowed if the CModel
       */
      'title callback' => 'ingest_rel_cmodel_title',
      'title arguments' => array(4),
      'load arguments' => array(2),
      'type' => MENU_CALLBACK,
      'page callback' => 'callback_ingest_related_lab_objects',
      'page arguments' => array(2, 4),
      'access callback' => TRUE,
    ),
    'islandora/object/%islandora_object/people' => array(
       /**
        * ### www.upeikerrlabs.ca/islandora/object/\%islandora_object/ingest/\%rel_cmodel
        * Provides a tab on an Islandora Object page that shows a
        * People form.
        */
      'title' => 'People',
      'type' => MENU_LOCAL_TASK,
      'description' => 'People collaborating on this project.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('related_people_form', 2),
      'access callback' => 'islandora_object_has_people',
      'access arguments' => array(2),
    ),
    'islandora/object/%islandora_object/people/add' => array(
      /**
       * ### www.upeikerrlabs.ca/islandora/object/\%islandora_object/people/add
       * Displays form for adding/removing people to %islandora_object.
       */
      'title callback' => 'add_person_title',
      'title arguments' => array(2),
      'description' => 'Adds a person to a project',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_project_people_add_form', 2),
      'type' => MENU_CALLBACK,
      'access callback' => 'islandora_object_has_people',
      'access arguments' => array(2),
      'file' => 'includes/manage_project.form.inc',
    ),
  );
}

function ingest_rel_cmodel_title($cmodel){
  $cmodel_id = $cmodel->id;
  return "Add $cmodel_id";
}


///////////////// Page Callbacks /////////////////
function callback_related_lab_objects($object) {
  /**
   * @author Dalton Mackenzie <demackenzie@upei.ca>
   *
   * @param $object - We want to find all objects related to this target object.
   *
   * @return $render_array - A renderable array, containing forms for each content
   * model with objects related to the target object.
   *
   * Page Callback callback_related_lab_objects($object)
   *
   * This page callback takes an object and determines
   * which lab object content models have a relationship
   * with its content model via SPARQL query.
   *
   * From here it should use drupal_get_form once for each
   * content model to generate a form populated with the lab
   * objects of the specified content model related to the given
   * object.
   *
   * These forms will be stored as a elements in a
   * renderable array, which the function will then return.
   */
  $render_array = array();
  $target_pid = $object->models[0]; //Get the pid for the input object's content model, we'll want to see if any lab objects have an isPartOf relationship with this pid.

  $tuque = new IslandoraTuque(); //Establish a tuque object

  //Construct a query which will find all pids adhering to the following two conditions:
  //Condition 1: pid corresponds to a content model that has a data relationship with $object

   $query = "
    PREFIX fedora-model: <info:fedora/fedora-system:def/model#>
    PREFIX fedora: <info:fedora/fedora-system:def/relations-external#>
    SELECT ?pid
    FROM <#ri>
    WHERE {
      ?pid fedora-model:hasModel <info:fedora/islandora:lab_object_cmodel> .
      ?pid fedora:datarel_isPartOf <info:fedora/$target_pid>
    }";

  $results = $tuque->repository->ri->sparqlQuery($query); //Now get the results for this query.

  $related_cmodels = array();
  foreach($results as $cmodel){
   $related_cmodels[] = islandora_object_load($cmodel['pid']['value']);
  }

  // Testing Porpoises.
  foreach ($related_cmodels as $related_cmodel_object) { //For each of the content models returned by the query,
 
    $pattern = '/islandora:(.*)_cmodel/';
    $related_cmodel_pid = $related_cmodel_object->id;
    preg_match($pattern, $related_cmodel_pid, $match);

    $object_type = $match[1]; //Get the cmodel

    $form_id = 'related_' . $object_type. '_form';

    if(function_exists($form_id)){
      $render_array[$object_type] = drupal_get_form($form_id, $object);
    }
    else {
      $args = array($object);
      $forms = module_invoke_all('forms', $form_id, $args );
      if(array_key_exists($form_id, $forms)){
        $render_array[$object_type] = drupal_get_form($form_id, $object);
      }
      else {
        $render_array[$object_type] = array();
      }
    }
 }
  //Return the renderable array
  return $render_array;
}


function callback_ingest_related_lab_objects($object, $cmodel) {
  /**
   * @author Dalton Mackenzie <demackenzie@upei.ca>
   *
   * @param $object
   * This is an object which we wish to relate a new object to. The new object will be of type cmodel, and will need to be ingested.
   *
   * @param $cmodel
   * This is the actual content model object of the type of object we would like to create (and ingest) and then establish some form of relationship with $object.
   *
   * Page Callback callback_related_lab_objects_ingest
   *
   * This callback will take an object and a cmodel object as parameters. The callback will then determine what type of content model
   * the cmodel is, and it will call callback_rel_lab_object_SUBTYPE_ingest($object) where SUBTYPE is the type of the content model.
   *
   */
  // @todo test callbac_related_lab_object_ingest

  //Get the pid of the content model
  $pattern = '/islandora:(.*)_cmodel/';
  $content_model_pid = $cmodel->id;
  preg_match($pattern, $content_model_pid, $match);

  $object_type = $match[1]; //Get the cmodel

  $module_name = 'islandora_lab_object' . $object_type;
  $callback_to_call = 'islandora_bioinformatics_'.$object_type. '_lab_object_'.$object_type.'_ingest';
  echo $callback_to_call;
  echo $module_name;
  module_load_include('module', $module_name, $module_name);
  if(function_exists($callback_to_call)){
     echo "</br>Bam";
     return $callback_to_call($object);
  }
  else
    return "NOPE";
}

///////////////// Forms /////////////////

function islandora_bioinformatics_base_forms($form_id, $args) {
  /**
   * @author Nolan Phillips ncphillips@upei.ca
   *
   * @param $formid
   * @param $args
   * @return $forms
   *
   * Implements hook_forms($form_id, $args)
   *
   * This function is used to associate a new Form ID with an existing form constructor.
   */
  $forms = array();
  switch($form_id){
    /**
     * ## Related People Form
     * __Form ID:__ `related_people_form`
     *
     * __Form Base ID:__ `related_islandora_objects_form`
     *
     * Creates a `related_islandora_objects_form` with the `$cmodel` and `$relationships`
     * arguments set as:
     *
     *      $cmodels = array('islandora:person_cmodel');
     *      $relationships = array(FEDORA_RELS_EXT_URI => array('isPartOf', 'isMemberOf'),);
     */
    case 'related_people_form':
      $cmodels = array('islandora:person_cmodel');
      $relationships = array(FEDORA_RELS_EXT_URI => array('isPartOf', 'isMemberOf'),);

      $args[] = $cmodels;
      $args[] = $relationships;

      $forms['related_people_form'] = array(
        'callback' => 'related_islandora_objects_form',
        'callback arguments' => $args,
      );
      break;
  }
  return $forms;
}


function related_islandora_objects_form($form, $form_state, $object, $cmodels=null, $relationships=null) {
  /**
   * ## related_islandora_objects_form
   *
   * @author Nolan Phillips ncphillips@upei.ca
   * @param $form
   * @param $form_state
   * @param $object
   * The Islandora Object whose relatives we are trying to find.
   *
   * @param $cmodels
   * An array of CModel PIDs
   *
   *      array('islandora:lcms_cmodel', 'islandora:book_cmodel')
   *
   * @param $relationships
   * An associative array in the form of:
   *
   *      array(
   *        'namespace 1' => array('rel1', 'rel2', 'rel3'),
   *        'namespace 2' => array('rel4'),
   *      )
   *
   *
   * Constructs a form which has a select table of islandora objects related to the
   * $object. A related object is listed iff it's cmodel is in $cmodels and the
   * relationship to $object is in $relationships.
   *
   * @todo This function isn't generic enough. It will list all CModels passed
   * in through the $cmodels array; but, the title of the form and the links to
   * add new objects will be based only off the first CModel provided. It might
   * be best if this link would link to a callback function that deals with this
   * in a way that is similar to how the Collection Solution Pack deals with
   * adding objects to collections that can contain multiple types of content.
   */
  $related_objects = related_islandora_objects($object, $cmodels, $relationships);

  $form_state['object'] = $object;
  $form_state['related_objects'] = $related_objects;
  if(isset($cmodels)) $form_state['cmodels'] = $cmodels;
  if(isset($relationships)) $form_state['relationships'] = $relationships;


  // Content Model Type
  $pattern = '/islandora:(.*)_cmodel/';
  preg_match($pattern, $cmodels[0], $match);
  $object_type = $match[1];

  // Header form
  $form['cmodel'] = array(
    '#markup' => ucfirst($object_type),
    '#prefix' => '<h1>',
    '#suffix' => '</h1>',
  );

  // Add Link
  $form['add'] = array(
    '#type' => 'markup',
    '#markdown' =>  l(t("Add $object_type"), t("islandora/object/{$object->id}/ingest/$object_type")),
  );

  // From our form there should be a list of specific operations that can be performed
  // on the objects in the list.
  $form['selected'] = array(
    '#type' => 'select',
    '#title' => 'Actions',
    '#options' => array(
      'delete' => t('Remove'),
    ),
    '#description' => t('Actions'),
  );

  // Submit button for form actions.
  $form['submit'] =  array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#submit' => array('related_islandora_objects_submit'),
  );

  $header = array(
    'id' => 'ID',
  );

  $options = array();

  foreach($related_objects as $related_object) {
    $options[$related_object->id] = array(
      'id' => $related_object->id,
    );
  }

  $form['table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t("Null."),
  );
  
  //adds object to the form
  $form['object'] = array(
    '#type' => 'value',
    '#value' => $object,
  );

  return $form;
}

function related_islandora_objects_submit(array $form, array &$form_state){
  
  $selected_option = $form_state['values']['selected'];
  $object = $form_state['values']['object'];
  $table_values = $form_state['values']['table'];
  
  switch($selected_option){
    case "delete":
      foreach($table_values as $lines => $line){
        if($line){
          $related_object = islandora_object_load($line);
          $related_object->relationships->remove(FEDORA_RELS_EXT_URI, 'isPartOf', $object->id);
        }
      }
    break;
  }
}


function islandora_bioinformatics_base_form_related_people_form_alter(&$form, &$form_state) {
  /**
   * @author Nolan Phillips ncphillips@upei.ca
   *
   * @param $form
   * @param $form_state
   * @return form array $form
   *
   * Implements hook_related_people_form_alter()
   *
   * Alters the related_objects_form for displaying related People.
   */

  $object = $form_state['object'];
  $object_id = $object->id;
  $people = $form_state['related_objects'];

  $header = array(
    'name' => t('Name'),
    'phone' => t('Phone Number'),
    'email' => t('Email'),
  );

  $form['add'] = array(
    '#type' => 'markup',
    '#markup' => l('Add Person', "islandora/object/$object_id/people/add")
  );

  $people_rows = array();

  foreach ($people as $person){
    // Default Values
    if(!isset($person['MADS'])) break;

    $person_mads = person_mads_to_array($person);
    $person_id = $person->id;

    $name = $person_mads['name']['first'] . ' ' . $person_mads['name']['last'];

    /**
     * @todo
     * The name link to the Person Object is hardcoded. This must be changed to be relative.
     */
    $people_entries[$person_id] = array(
      'name' => l($name, "islandora/object/$person_id"),
      'phone' => $person_mads['contact']['phone'],
      'email' => $person_mads['contact']['email'],
    );
  }

  // Set up the table.
  $form['table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $people_entries,
    '#empty' => t('There is no people related to ' . $object->id . '.'),
  );

  return $form;
}

///////////////// Loader Functions/////////////////

function cmodel_load($cmodel_id_part) {
  /**
   * @author Nolan Phillips <ncphillips@upei.ca>
   *
   * @param String $cmodel_id_part
   * This is a partial ID of an Islandora Content Model.
   *
   * @return FedoraObject $object | null
   * If a FedoraObject is found and it is a Content Model, return it;
   * else, return NULL.
   *
   * This function assumes that Content Model IDs follow
   * the pattern "islandora:" . $name . "_cmodel"
   */
  $cmodel_id = "islandora:" . $cmodel_id_part . "_cmodel";
  $cmodel = islandora_object_load($cmodel_id);
  if ($cmodel && !in_array('fedora-system:ContentModel-3.0', $cmodel->models)) {
    return NULL;
  }
  return $cmodel;
}


function rel_cmodel_load($cmodel_id_part, $object_id) {
  /**
   * @author Nolan Phillips ncphillips@upei.ca
   *
   * @param string $cmodel_id_part
   *
   * @param IslandoraFedoraObject $object
   *
   * @return FedoraObject|null
   * If the cmodel exists and has a datarel_partOf relationship to
   * the cmodel of %object, then it is returned; else return NULL.
   */
  $cmodel = cmodel_load($cmodel_id_part);
  /**
   * @todo Make this function actually check if they are supposed to be related.
   */

  return $cmodel;
}

///////////////// Theming /////////////////

function islandora_bioinformatics_base_theme($existing, $type, $theme, $path) {
  /**
  * Implements hook_theme().
  */
  return array(
    'islandora_person' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora_person',
      'pattern' => 'islandora_bioinformatics__',
      'variables' => array(
        'object' => NULL,
      ),
    ),

    'islandora_project' => array(
        'file' => 'theme/theme.inc',
        'template' => 'theme/islandora_project',
        'pattern' => 'islandora_bioinformatics__',
        'variables' => array(
            'object' => NULL,
        ),
    ),
  );
}






function islandora_bioinformatics_base_islandora_person_cmodel_islandora_view_object($object, $page_number, $page_size) {

  /**
   * Implements hook_CMODEL_PID_islandora_view_object() for Person.
   */
  $output = theme('islandora_person', array('islandora_object' => $object));
  return array('islandora_person' => $output);
}


function islandora_bioinformatics_base_islandora_project_cmodel_islandora_view_object($object, $page_number, $page_size) {
  /**
   * Implements hook_CMODEL_PID_islandora_view_object() for project.
   */
  $output = theme('islandora_project', array('islandora_object' => $object));
  return array('islandora_project' => $output);
}


function islandora_bioinformatics_base_islandora_required_objects(IslandoraTuque $connection) {
  /**
   * Implements hook_islandora_required_objects().
   */
  $module_path = drupal_get_path('module', 'islandora_bioinformatics_base');

  //---------Project Content Model------------------------------------------------------------------------------------//
  $project_cm = $connection->repository->constructObject('islandora:project_cmodel');
  $project_cm->owner = 'fedoraAdmin';
  $project_cm->label = 'Project Content Model';
  $project_cm->models = 'fedora-system:ContentModel-3.0';

  $datastream = $project_cm->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'Project Datastreams';
  $datastream->mimetype= 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/Project_ds_composite_model.xml", FALSE);
  $project_cm->ingestDatastream($datastream);

  //---------Project Content Model------------------------------------------------------------------------------------//
  $person_cm = $connection->repository->constructObject('islandora:person_cmodel');
  $person_cm->owner = 'fedoraAdmin';
  $person_cm->label = 'Person Content Model';
  $person_cm->models = 'fedora-system:ContentModel-3.0';

  $datastream = $person_cm->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'Person Datastreams';
  $datastream->mimetype= 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/Person_ds_composite_model.xml", FALSE);
  $person_cm->ingestDatastream($datastream);

  // Create relationship with LabObject
  $person_cm->relationships->add('', 'datarel_isPartOf', 'islandora:project_cmodel');

  //---------Lab Object Content Model---------------------------------------------------------------------------------//
  $lab_object_cm = $connection->repository->constructObject('islandora:lab_object_cmodel');
  $lab_object_cm->owner = 'fedoraAdmin';
  $lab_object_cm->label = 'LabObject Abstract Content Model';
  $lab_object_cm->models = 'fedora-system:ContentModel-3.0';

  $datastream = $lab_object_cm->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'LabObject content model';
  $datastream->mimetype= 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/LabObject_ds_composite_model.xml", FALSE);
  $lab_object_cm->ingestDatastream($datastream);

  //---------Lab Activity Content Model-------------------------------------------------------------------------------//
  $lab_activity_cm = $connection->repository->constructObject('islandora:lab_activity_cmodel');
  $lab_activity_cm->owner = 'fedoraAdmin';
  $lab_activity_cm->label = 'LabActivity Abstract Content Model';
  $lab_activity_cm->models = 'fedora-system:ContentModel-3.0';

  $datastream = $lab_activity_cm->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'LabActivity content model';
  $datastream->mimetype= 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/LabActivity_ds_composite_model.xml", FALSE);
  $lab_activity_cm->ingestDatastream($datastream);

  //---------Project Collection---------------------------------------------------------------------------------------//
  $project_collection = $connection->repository->constructObject('islandora:project_collection');
  $project_collection->owner = 'fedoraAdmin';
  $project_collection->label = 'Project Collection';
  $project_collection->models = 'islandora:collectionCModel';
  $project_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  $datastream = $project_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/collections/islandora_bioinformatics_project_collection_policy.xml", FALSE);
  $project_collection->ingestDatastream($datastream);

  //---------Person Collection ---------------------------------------------------------------------------------------//
  $person_collection = $connection->repository->constructObject('islandora:person_collection');
  $person_collection->owner = 'fedoraAdmin';
  $person_collection->label = 'Person Collection';
  $person_collection->models = 'islandora:collectionCModel';
  $person_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  $datastream = $person_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/collections/islandora_bioinformatics_person_collection_policy.xml", FALSE);
  $person_collection->ingestDatastream($datastream);


  return array(
    'islandora_bioinformatics_base' => array(
      'title' => 'Bioinformatics Base',
      'objects' => array(
        $project_cm,
        $project_collection,
        $person_cm,
        $person_collection,
        $lab_object_cm,
        $lab_activity_cm,
      ),
    ),
  );
}

///////////////// Islandora Form Builder /////////////////
/**
 * Implements hook_islandora_xml_form_builder_forms()
 * @return array
 */
function islandora_bioinformatics_base_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_bioinformatics_base');
  return array(
    'Person' => array(
      'form_file' => "$module_path/xml/forms/islandora_bioinformatics_person_form_mads.xml",
    ),
    'Project' => array(
      'form_file' => "$module_path/xml/forms/islandora_bioinformatics_project_form_mads.xml",
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations()
 * @return array
 */
function islandora_bioinformatics_base_islandora_xml_form_builder_form_associations() {
  return array(
    'islandora_bioinformatics_person_form_mads' => array(
      'content_model' => 'islandora:person_cmodel',
      'form_name' => 'Person',
      'dsid' => 'MADS',
      'title_field' => array('authority', 'titleInfo', 'title'),
      'transform' => '',
      'template' => FALSE,
    ),
    'islandora_bioinformatics_project_mads_form' => array(
      'content_model' => 'islandora:project_cmodel',
      'form_name' => 'Project',
      'dsid' => 'MADS',
      'transform' => '',
      'title_field' => array('authority', 'titleInfo', 'title'),
      'template' => FALSE,
    ),
  );
}


///////////////// Ingest Steps/////////////////
/**
 * Implements hook_islandora_ingest_steps() for the person_cmodel.
 */
function islandora_bioinformatics_base_islandora_person_cmodel_islandora_ingest_steps(array $configuration) {

  return array(
    'islandora_bioinformatics_base' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_bioinformatics_base_image_upload_form',
      'module' => 'islandora_bioinformatics_base',
      'file' => 'includes/islandora_bioinformatics_base_image_upload.form.inc',
    ),
  );
}


/**
 * Implements hook_islandora_ingest_steps() for the project_cmodel.
 */
function islandora_bioinformatics_base_islandora_project_cmodel_islandora_ingest_steps(array $configuration) {
  return array(
    'islandora_bioinformatics_base' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_bioinformatics_base_image_upload_form',
      'module' => 'islandora_bioinformatics_base',
      'file' => 'includes/islandora_bioinformatics_base_image_upload.form.inc',
    ),
  /*
   *	islandora_bioinformatics_base_assign_person_to_project_form has to be the last ingest step called.  If not, then people can exit the ingest process 	after submitting the form and creating relationships within person objects.
  */
  'islandora_bioinformatics_base_person_project' => array(
    'weight' => 15,
    'type' => 'form',
    'form_id' => 'islandora_bioinformatics_base_assign_person_to_project_form',
    'module' => 'islandora_bioinformatics_base',
    'file' => 'includes/islandora_bioinformatics_base_assign_person_to_project.form.inc',
  ),
  );
}


///////////////// Drupal User/Fedora Person Synchronization /////////////////
function islandora_bioinformatics_base_user_insert(&$edit, $account, $category) {
  /**
   * @author Quintin Dawson
   * @param &$edit
   * @param $account
   * @param $category
   *
   * Implements hook_user_insert()
   *
   * When a new drupal user is created, this function will create a corresponding Person object in Fedora.
   *
   */

  $tuque = new IslandoraTuque();
  
  echo '<pre>';
  echo var_dump($account->uid);
  echo '</pre>';
  
  //build person object

  //////You're overwriting the Person Content Model, not making a new object of type content model.

  $person_object = $tuque->repository->constructObject('islandora');
  $person_object->owner = 'fedoraAdmin';
  $person_object->label = $account->name;
  $person_object->models = 'islandora:person_cmodel';
  
  //build MADS xml from user information here
  $xml = '<?xml version="1.0"?>
            <mads:mads xmlns:mads="http://www.loc.gov/mads/v2" xmlns="http://www.loc.gov/mads/v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink">
              <mads:authority>
                <mads:name type="personal">
                  <mads:namePart type="given"></mads:namePart>
                  <mads:namePart type="family"></mads:namePart>
                  <mads:namePart type="date"/>
                </mads:name>
                <mads:titleInfo>
                  <mads:title>' . $account->name . ' </mads:title>
                </mads:titleInfo>
              </mads:authority>
              <mads:identifier type="u1"></mads:identifier>
              <mads:affiliation>
                <mads:phone></mads:phone>
                <mads:email>' . $account->mail . '</mads:email>
                <mads:organization></mads:organization>
                <mads:position></mads:position>
                <mads:address></mads:address>
                <mads:dateValid point="start"/>
                <mads:dateValid point="end"/>
              </mads:affiliation>
              <mads:url></mads:url>
              <mads:note type="history"/>
              <mads:fieldOfActivity></mads:fieldOfActivity>
            </mads:mads>';    
  
  //ingest the MADS datastream to the object
  $datastream = $person_object->constructDatastream('MADS', 'X');
  $person_object->ingestDatastream($datastream);
  
  //build MADS datastream
  $datastream->label = 'MADS Record';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromString($xml);
    
  //related person object to appriopriate collection  
  $person_object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:person_collection');
    
  //store uid of Drupal account in person object
  //$person_object->relationships->add(ISLANDORA_RELS_EXT_URI, 'isDrupalID', $account->uid, RELS_TYPE_STRING);    
  $person_object->relationships->add(RELS_INT_NS, 'isDrupalId', $account->uid, RELS_TYPE_INT);   

    
  //ingest object into fedora
  $tuque->repository->ingestObject($person_object);
  //$ingested_object = islandora_add_object($person_object);
}


function islandora_bioinformatics_base_user_update(&$edit, $account, $category) {
  /**
   * @author Quintin Dawson
   * @param &$edit
   * @param $account
   * @param $category
   *
   * Implements hook_user_update()
   *
   * When a Drupal user is modified, update the associated person object with the new values
   */
  //retrieve Person object related to the Drupal user
  $tuque = new IslandoraTuque();
  //this query should retrieve all person_cmodel objects
  $query = "SELECT ?pid
          FROM <#ri>
          WHERE {
          ?pid <fedora-model:hasModel> <info:fedora/islandora:person_cmodel> .
        }";     
       
  $result = $tuque->repository->ri->sparqlQuery($query, 'unlimited');  
  
  $account_person = NULL;
  
  //iterate over all people objects to find the one related to this drupal account
  foreach($result as $person) {
    //load the current person object
    $person_object = islandora_object_load($person['pid']['value']);
        
    //check if relationship to Drupal user exists
    $relation = $person_object->relationships->get(RELS_INT_NS, 'isDrupalId', $account->uid, RELS_TYPE_INT);
    if(!empty($relation)) {
      $account_person = $person_object;
    }
  }  
  
  /* //This query should retrieve all people objects related to the current drupal user [$account->id]
  $query = "SELECT ?uid
            FROM <#ri>
            WHERE {
              ?uid <" . ISLANDORA_RELS_EXT_URI . ":isDrupalID> <info:fedora/" . $account->id . "> .
            }"; 
  $result - $tuque->repository->ri->sparqlQuery($query, 'unlimited');
  
  //only one Fedora object should be related to the Drupal account, so take the first value in the $results array
  if(!empty($result[0])) {
    $account_person = result[0];
  }  
  */ 
  //if the Fedora object related to the Drupal account is found, make the desired changes
  
  if(empty($account_person)) { //create the person object if missing when modified
    islandora_bioinformatics_base_user_insert($edit, $account, $category);
  }
  else {  //modify the person object if existing
    //change the label
    $account_person->label = $account->name;
    
    //Modify the xml
    $person_xml = new SimpleXMLElement($person_object["MADS"]->content);
    $ns = "http://www.loc.gov/mads/v2";
    foreach ($person_xml->children($ns) as $part){
      switch ((string) $part->getName()){
          case 'authority':
            $part->titleInfo->title = $account->name;
            break;
          case 'identifier':
            //$part = $account->name;   //NOT WORKING AT THE MOMENT
            break;
          case 'affiliation':
            $part->email = $account->mail;
            break;
      }   
    }
    
    //Replace the old xml with the modified xml in Fedora
    $account_person['MADS']->setContentFromString($person_xml->asXML());
    $account_person['MADS']->label = 'MADS Record';
    $account_person['MADS']->mimetype = 'text/xml';
  }
}

function islandora_bioinformatics_base_user_cancel($edit, $account, $method) {
  /**
   * @author Quintin Dawson qdawson@upei.ca
   * @param $edit
   * @param $account
   * @param $method
   *
   * Implements hook_user_cancel()
   *
   * Called when a drupal user is deleted. This should find and delete the associated Fedora person object from the repository
   */

  
  //retrieve Person object related to the Drupal user
  $tuque = new IslandoraTuque();
  //this query should retrieve all person_cmodel objects
  $query = "SELECT ?pid
          FROM <#ri>
          WHERE {
          ?pid <fedora-model:hasModel> <info:fedora/islandora:person_cmodel> .
        }";     
       
  $result = $tuque->repository->ri->sparqlQuery($query, 'unlimited');  
  
  $account_person = NULL;
  
  //iterate over all people objects to find the one related to this drupal account
  foreach($result as $person) {
    //load the current person object
    $person_object = islandora_object_load($person['pid']['value']);
    
    //check if relationship to Drupal user exists
    $relation = $person_object->relationships->get(RELS_INT_NS, 'isDrupalId', $account->uid, RELS_TYPE_INT);
    if(!empty($relation)) {
      $account_person = $person_object;
    }
  }  
  
  if(!empty($account_person)) {
    switch($method) {
      case 'user_cancel_block':
        //do nothing
        break;
      case 'user_cancel_block_unpublish': //account is blocked and information is still accessible to administrators
        //mark object as deleted in Fedora
        $account_person->delete();  //flag object as deleted
        break;
      case 'user_cancel_reassign':  //account is deleted and information its contents belong to an anonymous user
        //purge object from fedora
        $account_person->delete();  //flag object as deleted
        $tuque->repository->purgeObject($account_person->id); //purge the object from the database
        break;
      /*
      case 'user_cancel_delete':   //Account is removed and all information is deleted
        //purge object from fedora
        $account_person->delete();  //flag object as deleted
        $tuque->repository->purgeObject($account_person->id); //purge the object from the database
        break;
      */
    }
  }
}

function islandora_bioinformatics_base_user_delete($account) {
  /**
   * @author Quintin Dawson qdawson@upei.ca
   * @param $edit
   * @param $account
   * @param $method
   *
   * Implements hook_user_delete()
   *
   * Called when a drupal user is deleted. This should find and delete the associated Fedora person object from the repository
   */


  //retrieve Person object related to the Drupal user
  $tuque = new IslandoraTuque();
  //this query should retrieve all person_cmodel objects
  $query = "SELECT ?pid
          FROM <#ri>
          WHERE {
          ?pid <fedora-model:hasModel> <info:fedora/islandora:person_cmodel> .
        }";

  $result = $tuque->repository->ri->sparqlQuery($query, 'unlimited');

  $account_person = NULL;

  //iterate over all people objects to find the one related to this drupal account
  foreach($result as $person) {
    //load the current person object
    $person_object = islandora_object_load($person['pid']['value']);

    //check if relationship to Drupal user exists
    $relation = $person_object->relationships->get(RELS_INT_NS, 'isDrupalId', $account->uid, RELS_TYPE_INT);
    if(!empty($relation)) {
      $account_person = $person_object;
    }
  }

  if(!empty($account_person)) {
    //purge object from fedora
    $account_person->delete();  //flag object as deleted
    $tuque->repository->purgeObject($account_person->id); //purge the object from the database
  }
}


///////////////// Helper Functions /////////////////
function person_mads_to_array($person_object){
  /**
   * @author Brent Mitton
   * @param $person_object
   * @return An array with person information
   *
   * Takes in an islandora person object and returns a simple array of the MADS data
   */
  $ns = "http://www.loc.gov/mads/v2";

  $person_mads = array();

  $person_xml = new SimpleXMLElement($person_object["MADS"]->content);

  foreach ($person_xml->children($ns) as $part){
    switch ((string) $part->getName()){
      case "authority":
        // I'm just going to rely on position for now. Which is pretty awful
        $person_mads["name"]["first"] = ($part->name->namePart[0]) ? (string)$part->name->namePart[0] : "" ;
        $person_mads["name"]["last"] = ($part->name->namePart[1]) ? (string)$part->name->namePart[1] : "" ;
        $person_mads["name"]["birthdate"] = ($part->name->namePart[2]) ? (string)$part->name->namePart[2] : "" ;
        $person_mads["title"] = ($part->titleInfo->title) ? (string)$part->titleInfo->title : "";
        break;
      case "identifier":
        // I dont know if this is even working
        break;
      case "affiliation":
        $person_mads['contact']['phone'] = ($part->phone) ? (string)$part->phone : "";
        $person_mads['contact']['email'] = ($part->email) ? (string)$part->email : "";
        $person_mads['contact']['organization'] = ($part->organization) ? (string)$part->organization : "";
        $person_mads['contact']['position'] = ($part->position) ? (string)$part->position : "";
        $person_mads['contact']['address'] = ($part->address) ? (string)$part->address : "";
        $person_mads['contact']['startDate'] = ($part->dateValid[0]) ? (string)$part->dateValid[0] : "";
        $person_mads['contact']['endDate'] = ($part->dateValid[1]) ? (string)$part->dateValid[1] : "";

        break;
      case "url":
        $person_mads['contact']['url'] = ($part) ? (string)$part : "";
        break;
      case "note":
        // I want to figure out how we want to deal with this before I do it
        break;
      case "fieldOfActivity":
        // What is this?
        break;
      default:
        throw new Exception("Unexpected XML Field.");
        break;
    }
  }
  return $person_mads;
}



function project_mads_to_array($project_object){
  /**
   * @author Brent Mitton
   * @param $project_object
   *  An islandora object for the project
   * @return array
   *  an array of information needed pertaining to the projcet
   *
   * Takes a project object and returns a simple array of the data in the MADS stream.
   * I'm not sure what data we need from this right now.
   */
  $ns = "http://www.loc.gov/mads/v2";

  $project_xml = new SimpleXMLElement($project_object["MADS"]->content);

  $project_mads = array();

  foreach ($project_xml->children($ns) as $part){

    switch ((string) $part->getName()){
      case "authority":
        $project_mads["title"] = ((string)$part->titleInfo->title) ? (string)$part->titleInfo->title:"";
        break;
      case "affiliation":
        $project_mads["organization"] = ((string)$part->organization) ? (string)$part->organization:"";

        $project_mads["address"]["city"] = ((string)$part->address->city) ? (string)$part->address->city:"";
        $project_mads["address"]["street"] = ((string)$part->address->street) ? (string)$part->address->street:"";
        $project_mads["address"]["country"] = ((string)$part->address->country) ? (string)$part->address->country:"";
        $project_mads["address"]["postcode"] = ((string)$part->address->postcode) ? (string)$part->address->postcode:"";

        $project_mads["email"] = ((string)$part->email) ? (string)$part->email:"";
        $project_mads["phone"] = ((string)$part->phone) ? (string)$part->phone:"";

        $project_mads["startdate"] = ((string) $part->dateValid[0]) ? (string)$part->dateValid[0]:"";
        $project_mads["enddate"] = ((string) $part->dateValid[1]) ? (string)$part->dateValid[1]:"";

        break;
      case "note":
        // add these in when needed
        break;
      case "fieldOfActivity":
        break;
    };
  }
  return $project_mads;
}


function related_islandora_objects($object, $cmodels=null, $relationships=null){
  /**
   * @author Nolan Phillips ncphillips@upei.ca
   *
   * @param $object
   *
   * @param $cmodels
   * An array of strings representing fedora IDs of Content Models.
   *
   * @param $relationships
   * An associative array whose keys are namespaces, and whose values
   * are arrays of relationships in that namespace.
   *
   * @return $related_objects
   * An array of IslandoraFedoraObjects that are related to the $object.
   *
   */

  $obj_id = $object->id;  // The Fedora PID of $object.
  $cmodel_query = '';  // A union of CModel tripples.

  $pre = array();  // An associative array of namespace => prefix.
  $pre_defs = array();  // An array of prefix definitions.

  // Default values for $pre and $pre_defs
  $pre[FEDORA_MODEL_URI] = 'fedora-model:';

  // Besides 'fedora-model', the first prefix being used is 'a'.
  $prefix = 'a';$pre_defs[] = 'PREFIX fedora-model: <info:fedora/fedora-system:def/model#>';

  /**
   * ## CModel Query Construction
   * If an Fedora Object's CModel set is a subset of $cmodels then the object
   * may be returned; however, if the set of CModels passed in is empty, then
   * an object is accepted regardless of it's CModel set.
   */
  if ($cmodels){
    $cmodel_tripples= array();
    foreach($cmodels as $cmodel)
      $cmodel_tripples[] = "{?pid fedora-model:hasModel <info:fedora/$cmodel>}";
    // Union all the cmodel tripple queries.
    $cmodel_query = '{'.implode(' UNION ', $cmodel_tripples).'}';
  }

  // Construct the set of prefix definitions.
  /**
   * ## Namespace Prefix Definitions
   * ### Without Namespaces
   * A Fedora Object may be accepted if it has any relationship to the target $object.
   *
   * ### Namespaces without relationships
   * A Fedora Object may be accepted if it has any relationship to the
   * target $object that is defined within any of the namespaces provided.
   *
   * ### Namespaces with relationships
   * A Fedora Object may be accepted if it has a relationship to the
   * target $object that is listed in that namespaces associative array.
   */
  if($relationships){
    // Define PREFIX statements
    foreach($relationships as $ns => $rel){
      $pre[$ns] = $prefix.':';
      $pre_defs[] = 'PREFIX ' . $prefix++ . ": <$ns>";
    }
    $pre_def = implode(' ', $pre_defs);

    // Define relationship tripples
    foreach($relationships as $ns => $rels){
      foreach($rels as $rel){
        $nsrel = $pre[$ns] . $rel;
        $rel_tripples[] = "{?pid $nsrel <info:fedora/$obj_id>}";
      }
    }
    // Union all the relationship tripples
    $rel_query = '{'.implode(' UNION ', $rel_tripples).'}';
  }
  else {
    $pre_def = $pre_defs[0];
    $rel_query = "{?pid ?any_rel <info:fedora/$obj_id>}";
  }

  $query = "
    $pre_def
    SELECT ?pid
    FROM <#ri>
    WHERE {
        $cmodel_query
        $rel_query
    }
  ";

  // For testing porpoises.
  //file_put_contents('/tmp/sparqlquery.txt', $query);

  // Run the query.
  $tuque = new IslandoraTuque();
  $result = $tuque->repository->ri->sparqlQuery($query);

  $related_objects = array();
  foreach($result as $related_object) {
    $obj = islandora_object_load($related_object['pid']['value']);
    $related_objects[] = $obj ;
  }
/**
 * ## Example Query
 * Here is an example of query that may be produced within this function.
 *
 *      PREFIX a: <info:fedora/fedora-system:def/relations-external#>
 *      PREFIX b: <info:fedora/fedora-system:def/model#>
 *  	 SELECT ?pid
 *  	 FROM <#ri>
 *  	 WHERE
 *      {
 *        {
 *          {?pid b:hasModel <info:fedora/islandora:person_cmodel>}
 *          UNION
 *          {?pid b:hasModel <info:fedora/islandora:specimen_cmodel>}
 *        }
 *        {
 *          {?pid a:isMemberOf <info:fedora/islandora:524>}
 *        }
 *      }
 */

  return $related_objects;
}

///////////////// Test Functions /////////////////
function test_people_add($object){
  echo "hello";
  module_load_include('inc', 'islandora_bioinformatics_base', 'manage_project.form.inc');
  drupal_get_form('islandora_project_people_add_form', $object);
}
