<?php

/**
  * @file
  * Hooks and callbacks for the module.
  */

// Permissions.
define('ISLANDORA_VIEW_OBJECTS', 'view fedora repository objects');
define('ISLANDORA_METADATA_EDIT', 'edit fedora metadata');
define('ISLANDORA_ADD_DS', 'add fedora datastreams');
define('ISLANDORA_INGEST', 'ingest fedora objects');
define('ISLANDORA_PURGE', 'delete fedora objects and datastreams');
define('ISLANDORA_MANAGE_PROPERTIES', 'manage object properties');
define('ISLANDORA_VIEW_DATASTREAM_HISTORY', 'view old datastream versions');
define('ISLANDORA_MANAGE_DELETED_OBJECTS', 'manage deleted objects');
define('ISLANDORA_REVERT_DATASTREAM', 'revert to old datastream');
define('ISLANDORA_REGENERATE_DERIVATIVES', 'regenerate derivatives for an object');


/**
 * Page Callback callback_rel_lab_object($object)
 *
 * @param $object - We want to find all objects related to this target object.
 *
 * @return $render_array - A renderable array, containing forms for each content
 * model with objects related to the target object.
 *
 * @author Dalton Mackenzie <demackenzie@upei.ca>
 *
 * This page callback takes an object and determines
 * which lab object content models have a relationship
 * with its content model via SPARQL query.
 *
 * From here it should use drupal_get_form once for each
 * content model to generate a form populated with the lab 
 * objects of the specified content model related to the given
 * object.
 *
 * These forms will be stored as a elements in a
 * renderable array, which the function will then return.
 */
function callback_rel_lab_object($object) {
  
  $render_array = array();

  $target_pid = $object['models'][0]->id; //Get the pid for the input object's content model, we'll want to see if any lab objects have an isPartOf relationship with this pid.

  $tuque = new IslandoraTuque(); //Establish a tuque object

  //Construct a query which will find all pids adhering to the following two conditions:
  //Condition 1: pid corresponds to a content model that has a data relationship with $object

  $query = "SELECT ?pid
            FROM <#ri>
            WHERE {
              ?pid <fedora-model:hasModel> <info:fedora/islandora:lab_object> .
              ?pid <datarel_isPartOf> <info:fedora/$target_pid> .
            }"; 

  $related_cmodels = $tuque->repository->ri->sparqlQuery($query); //Now get the results for this query.

  
 
  foreach ($related_cmodels as $related_cmodel_pid) { //For each of the content models returned by the query,
 
    //Parse the pid of the related content model to get the form id.

    //The format will namespace:objectType_cmodel, so use the strtok function twice with ':' as the delimiter,
    //and then once more with '_' to extract the object_type, which will be used to construct the form id.

    $first_part_of_pid = strtok($related_cmodel_pid, ':');
    $related_cmodel = strtok($related_cmodel_pid, ':');
    $object_type = strtok($related_cmodel, '_');

    $form_id = 'related_' . $object_type . '_form';

    //Add the form array to the render array.

    $render_array/*[]*/ = drupal_get_form($form_id, $object);

  }


  //Return the renderable array
  return $render_array;
}

/**
 * Page Callback callback_rel_lab_object_ingest
 * 
 * @param $object - This is an object which we wish to relate a new object to. The new object will be of type cmodel, and will need to be ingested.
 * @param $cmodel - This is the actual content model object of the type of object we would like to create (and ingest) and then establish some form of relationship with $object.
 *
 * @author Dalton Mackenzie <demackenzie@upei.ca>
 *
 * This callback will take an object and a cmodel object as parameters. The callback will then determine what type of content model
 * the cmodel is, and it will call callback_rel_lab_object_SUBTYPE_ingest($object) where SUBTYPE is the type of the content model.
 *
 */

function callback_rel_lab_object_ingest($object, $cmodel) {

  //Get the pid of the content model
  $content_model_pid = $cmodel->id;
  
  $first_part_of_pid = strtok($content_model_pid, ':');
  $subtype_cmodel = strtok($content_model_pid, ':');
  $subtype = strtok($related_cmodel, '_');

  $callback_to_call = "callback_rel_lab_object_" . $subtype . "_ingest";

  $callback_to_call($object);
}

/**
 * Implements hook_related_people_form_alter()
 * @param $form
 * @param $form_state
 * @return mixed
 *
 * @author Nolan Phillips ncphillips@upei.ca
 */
function islandora_bioinformatics_base_related_people_form_alter($form, &$form_state) {
  $object = $form_state['object'];
  $people = $form_state['related_objects'];

  // Table of Related Lab Objects.
  $header = array(
    'first' => t('First Name'),
    'last' => t('Last Name'),
    'phone' => t('Phone Number'),
    'email' => t('Email'),
  );

  $options = array();

  $ns = "http://www.loc.gov/mads/v2";

  foreach ($people as $person){
    // Default Values
    $first = '';
    $last = '';
    $email = '';
    $phone = '';
    if(!isset($person['MADS'])) break;

    echo 'FULL DATASTREAM </br></br>' . $person['MADS']->content . '</br></br>END FULL DATASTREAM';

    $MADS_DATA = $person['MADS']->content;
    $MADS = new SimpleXMLElement($MADS_DATA);
    $MADS->registerXPathNamespace('mads', $ns);

    // Parsing the XML isn't working, it just returns empty strings.

    foreach($name_parts as $name_part){
      if($name_part['type'] == 'given')
        $first = $name_part;
      elseif ($name_part['type'] == 'family')
        $last = $name_part;
    }

    $phone = $MADS->authority->affiliation->phone;
    $email = $MADS->authority->affiliation->email;

    $options[$person->id] = array(
      'first' => $first,
      'last' => $last,
      'phone' => $phone,
      'email' => $email,
    );
  }

  // Set up the table.
  $form['table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t("There is no people related to this object."),
  );

  return $form;
}

/**
 * related_islandora_objects
 *
 * This function finds al
 *
 * @param IslandoraFedoraObject $object
 * @param string array | null $cmodels
 * An array of strings representing fedora IDs of Content Models.
 * @param array | null $relationships
 * An associative array whose keys are namespaces, and whose values
 * are arrays of relationships in that namespace.
 *
 * @return IslandoraFedoraObject array $related_objects
 *
 * @authoer Nolan Phillips ncphillips@upei.ca
 */
function related_islandora_objects($object, $cmodels=null, $relationships=null){
  $related_objects = array();

  $obj_id = $object->id;


  foreach($cmodels as $cmodel){
  }


  $tuque = new IslandoraTuque();

  $result = $tuque->repository->ri->query($query);

  foreach($result as $related_object) {
    $related_objects[] = islandora_object_load($related_object['pid']['values']);
  }

  return $related_objects;
}


/**
 * related_islandora_objects_form
 *
 * Constructs a form which has a select table of islandora objects related to the
 * $object. A related object is listed iff it's cmodel is in $cmodels and the
 * relationship to $object is in $relationships.
 *
 * @param $form
 * @param $form_state
 * @param $object
 * @param null $cmodels
 * @param null $relationships
 *
 * @author Nolan Phillips ncphillips@upei.ca
 *
 */
function related_islandora_objects_form($form, $form_state, $object, $cmodels=null, $relationships=null) {

  // Find the list of related islandora objects.
//  $related_objects = related_islandora_objects($object, $cmodels, $relationships);
  $object = islandora_object_load('islandora:524');
  $related_objects[] = islandora_object_load('islandora:388');

  $form_state['object'] = $object;
  $form_state['related_objects'] = $related_objects;
  if(isset($cmodels)) $form_state['cmodels'] = $cmodels;
  if(isset($relationships)) $form_state['relationships'] = $relationships;

  // From our form there should be a list of specific operations that can be performed
  // on the objects in the list.
  $form['selected'] = array(
    '#type' => 'select',
    '#title' => 'Actions',
    '#options' => array(
      'delete' => t('Remove'),
    ),
    '#description' => t('Actions'),
  );

  // Submit button for form actions.
  $form['submit'] =  array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  $header = array(
    'id' => 'ID',
    'title' => 'Title',
  );

  $options = array();

  foreach($related_objects as $related_object) {
    $options[$related_object->id] = array(
      'id' => $related_object->id,
      'title' => $related_object->title,
    );
  }

  $form['table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t("Null."),
  );

  return $form;
}

/**
 * Implements hook_forms
 *
 * @param $formid
 * @param $args
 * @return mixed
 *
 * @author Nolan Phillips ncphillips@upei.ca
 */
function islandora_bioinformatics_base_forms($form_id, $args) {
  $forms['related_person_form'] = array(
    'callback' => 'related_islandora_object_form',
    'callback arguments' => array(
      array('islandora:person_cmodel'),
      array(FEDORA_RELS_EXT_URI => array('isPartOf', 'isMemberOf'),),
    ),
  );
  return $forms;
}

function TESTCB(){

  $object = islandora_object_load('islandora:525');
  $people = islandora_object_load('islandora:388');

  return drupal_get_form('rel_people_form', $object, $people);

  $render_array = array();

  $object = 'Your Mom';
  $rel_cmodels = array('specimen', 'lcms');


  foreach ($rel_cmodels as $rel_cmodel) {
    $element_name = $rel_cmodel . "_form";
    $render_array[$element_name] = drupal_get_form('rel_lab_objects_' . $rel_cmodel . '_form', $object, $rel_cmodel);
    $module_name = "islandora_lab_object_$rel_cmodel";
  }
  return $render_array;
}

/**
 * Implements hook_menu().
 *
 * @author Natasha Squires
 * @author Nolan Phillips <ncphillups@upei.ca>
 */
function islandora_bioinformatics_base_menu() {
  return array(
    'testing/%' => array(
      'title' => 'TEST',
      'type' => MENU_CALLBACK,
      'page callback' => 'TESTCB',
      'access callback' => TRUE,
    ),
    'islandora/object/%islandora_object/lab_objects/' => array(
      /*
       * Lists all lab_objects associated with the %islandora_object.
       * @TODO
       */
    ),

    'islandora/object/%islandora_object/ingest/%rel_cmodel' => array(
      /*
       * Begins the ingestion process for a new object that will
       * be of a type %cmodel and related to %islandora_object.
       * @TODO
       */
    ),

    'islandora/object/%islandora_object/people' => array(
      /**
       * Creates a tab alongside the Manage and View tabs. This links to a page
       * listing all of the people in the project.
       */

      'title' => 'People',
      'type' => MENU_LOCAL_TASK,
      'description' => 'People collaborating on this project.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('related_people_form', 2),
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
      'file' => 'includes/manage_project.form.inc',
    ),

    'islandora/object/%islandora_object/people/add' => array(
      /**
       * Displays form for adding/removing people to %islandora_object.
       */
      'title callback' => 'add_person_title',
      'title arguments' => array(2),
      'description' => 'Adds a person to a project',
      'page callback' => 'test_people_add',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    ),
  );
}

function test_people_add($object){
 drupal_get_form('islandora_project_people_add_form', $object);
}

// LOADERS //
/**
 * cmodel_load
 *
 * This function assumes that Content Model IDs follow
 * the pattern "islandora:" . $name . "_cmodel"
 *
 * @author Nolan Phillips <ncphillips@upei.ca>
 * @param String $cmodel_id_part
 * This is a partial ID of an Islandora Content Model.
 * @return FedoraObject $object | null
 * If a FedoraObject is found and it is a Content Model, return it;
 * else, return NULL.
 */
function cmodel_load($cmodel_id_part) {
  $cmodel_id = "islandora:" . $cmodel_id_part . "_cmodel";
  $cmodel = islandora_object_load($cmodel_id);
  if ($cmodel && !in_array('fedora-system:ContentModel-3.0', $cmodel->models)) {
    return NULL;
  }
  return $cmodel;
}

/**
 * rel_cmodel_load
 *
 * @author Nolan Phillips ncphillips@upei.ca
 * @param string $cmodel_id_part
 * @param IslandoraFedoraObject $object
 * @return FedoraObject|null
 * If the cmodel exists and has a datarel_partOf relationship to
 * the cmodel of %object, then it is returned; else return NULL.
 */
function rel_cmodel_load($cmodel_id_part, $object) {
  $cmodel = cmodel_load($cmodel_id_part);
  // If a cmodel FedoraObject is found.
  if ($object) {
    $pred_uri = ""; // There is currently no pred_uri
    $pred = "datarel";
    $target_id = $object->id;
    $type = FALSE; // Don't know why.

    // Check if it has a datarel to the target object.
    if (!islandora_object_has_relationship($cmodel, $pred_uri, $pred, $target_id, $type))
      return NULL;
  }
  return $cmodel;
}
// END LOADERS //


function rel_lab_objects_list($object) {
  /** @TODO
    Invokes hook_rel_lab_object_list
    Invokes drupal_alter on
      hook_rel_lab_object_list_alter
      get list of all related cmodels, and remove the non lab_object subtypes
        for each related cmodel, where the cmodel name is TYPE
          hook_rel_lab_object_TYPE_list_alter
    See the bottom of the following function for an example of how to do this alter
    calling https://api.drupal.org/api/drupal/includes%21form.inc/function/drupal_prepare_form/7
   */

}

function rel_lab_object_ingest($object, $cmodel) {

}

/**
  * Implements hook_theme().
  */
function islandora_bioinformatics_base_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_person' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora_person',
      'pattern' => 'islandora_person__',
      'variables' => array(
        'object' => NULL,
      ),
    ),
    'islandora_project' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora_project',
      'pattern' => 'islandora_project__',
      'variables' => array(
        'object' => NULL,
      ),
    ),
  );
}

/**
  * Implements hook_CMODEL_PID_islandora_view_object() for Person.
  */
function islandora_bioinformatics_base_person_cmodel_islandora_view_object(AbstractObject $person) {

  $output = theme('islandora_bioinformatics_base', array('object' => $person));
  return array(
    'islandora_person' => $output,
  );
}

/**
  * Implements hook_CMODEL_PID_islandora_view_object() for Project.
  */
function islandora_bioinformatics_base_project_cmodel_islandora_view_object(AbstractObject $project) {
  $output = theme('islandora_bioinformatics_base', array('object' => $project));
  return array(
    'islandora_project' => $output,
  );
}

/**
  * Implements hook_islandora_required_objects().
  */
function islandora_bioinformatics_base_islandora_required_objects(IslandoraTuque $connection) {
  /*
   * @TODO Add datarel from Person to Project.
   * @TODO Add datarel from Lab Object to Project.
   */

  $module_path = drupal_get_path('module', 'islandora_bioinformatics_base');

  //---------Project Content Model------------------------------------------------------------------------------------//
  $project_cm = $connection->repository->constructObject('islandora:project_cmodel');
  $project_cm->owner = 'fedoraAdmin';
  $project_cm->label = 'Project Content Model';
  $project_cm->models = 'fedora-system:ContentModel-3.0';

  $datastream = $project_cm->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'Project Datastreams';
  $datastream->mimetype= 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/Project_ds_composite_model.xml", FALSE);
  $project_cm->ingestDatastream($datastream);

  //---------Project Content Model------------------------------------------------------------------------------------//
  $person_cm = $connection->repository->constructObject('islandora:person_cmodel');
  $person_cm->owner = 'fedoraAdmin';
  $person_cm->label = 'Person Content Model';
  $person_cm->models = 'fedora-system:ContentModel-3.0';

  $datastream = $person_cm->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'Person Datastreams';
  $datastream->mimetype= 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/Person_ds_composite_model.xml", FALSE);
  $person_cm->ingestDatastream($datastream);

  // Create relationship with LabObject
  $person_cm->relationships->add('', 'datarel_isPartOf', 'islandora:project_cmodel');

  //---------Lab Object Content Model---------------------------------------------------------------------------------//
  $lab_object_cm = $connection->repository->constructObject('islandora:lab_object_cmodel');
  $lab_object_cm->owner = 'fedoraAdmin';
  $lab_object_cm->label = 'LabObject Abstract Content Model';
  $lab_object_cm->models = 'fedora-system:ContentModel-3.0';

  $datastream = $lab_object_cm->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'LabObject content model';
  $datastream->mimetype= 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/LabObject_ds_composite_model.xml", FALSE);
  $lab_object_cm->ingestDatastream($datastream);

  //---------Lab Activity Content Model-------------------------------------------------------------------------------//
  $lab_activity_cm = $connection->repository->constructObject('islandora:lab_activity_cmodel');
  $lab_activity_cm->owner = 'fedoraAdmin';
  $lab_activity_cm->label = 'LabActivity Abstract Content Model';
  $lab_activity_cm->models = 'fedora-system:ContentModel-3.0';

  $datastream = $lab_activity_cm->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'LabActivity content model';
  $datastream->mimetype= 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/LabActivity_ds_composite_model.xml", FALSE);
  $lab_activity_cm->ingestDatastream($datastream);

  //---------Project Collection---------------------------------------------------------------------------------------//
  $project_collection = $connection->repository->constructObject('islandora:project_collection');
  $project_collection->owner = 'fedoraAdmin';
  $project_collection->label = 'Project Collection';
  $project_collection->models = 'islandora:collectionCModel';
  $project_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  $datastream = $project_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/collections/islandora_bioinformatics_project_collection_policy.xml", FALSE);
  $project_collection->ingestDatastream($datastream);

  //---------Person Collection ---------------------------------------------------------------------------------------//
  $person_collection = $connection->repository->constructObject('islandora:person_collection');
  $person_collection->owner = 'fedoraAdmin';
  $person_collection->label = 'Person Collection';
  $person_collection->models = 'islandora:collectionCModel';
  $person_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  $datastream = $person_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/collections/islandora_bioinformatics_person_collection_policy.xml", FALSE);
  $person_collection->ingestDatastream($datastream);


  return array(
    'islandora_bioinformatics_base' => array(
      'title' => 'Bioinformatics Base',
      'objects' => array(
        $project_cm,
        $project_collection,
        $person_cm,
        $person_collection,
        $lab_object_cm,
        $lab_activity_cm,
      ),
    ),
  );
}

function islandora_bioinformatics_base_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_bioinformatics_base');
  return array(
    'Person' => array(
      'form_file' => "$module_path/xml/forms/islandora_bioinformatics_person_form_mads.xml",
    ),
    'Project' => array(
      'form_file' => "$module_path/xml/forms/islandora_bioinformatics_project_form_mads.xml",
    ),
  );
}

function islandora_bioinformatics_base_islandora_xml_form_builder_form_associations() {
  return array(
    'islandora_bioinformatics_person_form_mads' => array(
      'content_model' => 'islandora:person_cmodel',
      'form_name' => 'Person',
      'dsid' => 'MADS',
      'title_field' => array('authority', 'titleInfo', 'title'),
      'transform' => '',
      'template' => FALSE,
    ),
    'islandora_bioinformatics_project_mads_form' => array(
      'content_model' => 'islandora:project_cmodel',
      'form_name' => 'Project',
      'dsid' => 'MADS',
      'transform' => '',
      'title_field' => array('authority', 'titleInfo', 'title'),
      'template' => FALSE,
    ),
  );
}
  
 /**
 * Implements hook_islandora_ingest_steps() for the person_cmodel.
 */
function islandora_bioinformatics_base_islandora_person_cmodel_islandora_ingest_steps(array $configuration) {

  return array(
    'islandora_bioinformatics_base' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_bioinformatics_base_image_upload_form',
      'module' => 'islandora_bioinformatics_base',
      'file' => 'includes/islandora_bioinformatics_base_image_upload.form.inc',
    ),
  );
}

 /**
 * Implements hook_islandora_ingest_steps() for the project_cmodel.
 */
function islandora_bioinformatics_base_islandora_project_cmodel_islandora_ingest_steps(array $configuration) {
  return array(
    'islandora_bioinformatics_base' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_bioinformatics_base_image_upload_form',
      'module' => 'islandora_bioinformatics_base',
      'file' => 'includes/islandora_bioinformatics_base_image_upload.form.inc',
    ),
  /*
   *	islandora_bioinformatics_base_assign_person_to_project_form has to be the last ingest step called.  If not, then people can exit the ingest process 	after submitting the form and creating relationships within person objects.
  */
  'islandora_bioinformatics_base_person_project' => array(
    'weight' => 15,
    'type' => 'form',
    'form_id' => 'islandora_bioinformatics_base_assign_person_to_project_form',
    'module' => 'islandora_bioinformatics_base',
    'file' => 'includes/islandora_bioinformatics_base_assign_person_to_project.form.inc',
  ),
  );
}

/**
* @author Quintin Dawson
* When a new drupal user is created, this function will create a corresponding Person object in Fedora.
*
*/
function islandora_bioinformatics_base_user_insert(&$edit, $account, $category) {  
  $tuque = new IslandoraTuque();
  
  //build person object

  //////You're overwriting the Person Content Model, not making a new object of type content model.

  $person_object = $tuque->repository->constructObject('islandora');
  $person_object->owner = 'fedoraAdmin';
  $person_object->label = $account->name;
  $person_object->models = 'islandora:person_cmodel';
  
  //build MADS xml from user information here
  $xml = '<?xml version="1.0"?>
            <mads:mads xmlns:mads="http://www.loc.gov/mads/v2" xmlns="http://www.loc.gov/mads/v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink">
              <mads:authority>
                <mads:name type="personal">
                  <mads:namePart type="given"></mads:namePart>
                  <mads:namePart type="family"></mads:namePart>
                  <mads:namePart type="date"/>
                </mads:name>
                <mads:titleInfo>
                  <mads:title>' . $account->name . ' </mads:title>
                </mads:titleInfo>
              </mads:authority>
              <mads:identifier type="u1">' . $account->name . '</mads:identifier>
              <mads:affiliation>
                <mads:phone></mads:phone>
                <mads:email>' . $account->mail . '</mads:email>
                <mads:organization></mads:organization>
                <mads:position></mads:position>
                <mads:address></mads:address>
                <mads:dateValid point="start"/>
                <mads:dateValid point="end"/>
              </mads:affiliation>
              <mads:url></mads:url>
              <mads:note type="history"/>
              <mads:fieldOfActivity></mads:fieldOfActivity>
            </mads:mads>';    
  
  //ingest the MADS datastream to the object
  $datastream = $person_object->constructDatastream('MADS', 'X');
  $person_object->ingestDatastream($datastream);
  
  //build MADS datastream
  $datastream->label = 'MADS Record';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromString($xml);
    
  dpm($account);
    
  $person_object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:person_collection');
    
  //ingest object into fedora
  $tuque->repository->ingestObject($person_object);
  //$ingested_object = islandora_add_object($person_object);
}


/**
* @author Quintin Dawson
* When a Drupal user is modified, update the associated person object with the new values
*
*/
function islandora_bioinformatics_base_user_update(&$edit, $account, $category) {

}

/**
 * @author Brent Mitton
 * @param $person_object
 * @return An array with person information
 * Takes in an islandora person object and returns a simple array of the MADS data
 */
function person_mads_to_array($person_object){
  $ns = "http://www.loc.gov/mads/v2";

  $person_mads = array();

  $person_xml = new SimpleXMLElement($person_object["MADS"]->content);

  // parse the 'authority' section of mads.


  foreach ($person_xml->children($ns) as $part){


    switch ((string) $part->getName()){
      case "authority":
        // I'm just going to rely on position for now. Which is pretty awful
        $person_mads["name"]["first"] = ($part->name->namePart[0]) ? (string)$part->name->namePart[0] : "" ;
        $person_mads["name"]["last"] = ($part->name->namePart[1]) ? (string)$part->name->namePart[1] : "" ;
        $person_mads["name"]["birthdate"] = ($part->name->namePart[2]) ? (string)$part->name->namePart[2] : "" ;
        $person_mads["title"] = ($part->titleInfo->title) ? (string)$part->titleInfo->title : "";
        break;
      case "identifier":
        // I dont know if this is even working
        break;
      case "affiliation":
        $person_mads['contact']['phone'] = ($part->phone) ? (string)$part->phone : "";
        $person_mads['contact']['email'] = ($part->email) ? (string)$part->email : "";
        $person_mads['contact']['organization'] = ($part->organization) ? (string)$part->organization : "";
        $person_mads['contact']['position'] = ($part->position) ? (string)$part->position : "";
        $person_mads['contact']['address'] = ($part->address) ? (string)$part->address : "";
        $person_mads['contact']['startDate'] = ($part->dateValid[0]) ? (string)$part->dateValid[0] : "";
        $person_mads['contact']['endDate'] = ($part->dateValid[1]) ? (string)$part->dateValid[1] : "";

        break;
      case "url":
        $person_mads['contact']['url'] = ($part) ? (string)$part : "";
        break;
      case "note":
        // I want to figure out how we want to deal with this before I do it
        break;
      case "fieldOfActivity":
        // What is this?
        break;
      default:
        throw new Exception("Unexpected XML Field.");
        break;
    }
  }

  return $person_mads;
}
